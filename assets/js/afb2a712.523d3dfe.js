"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[132],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=s(n),m=o,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[d]="string"==typeof e?e:o,i[1]=p;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1717:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:1},i="First Steps",p={unversionedId:"overview/first-steps",id:"overview/first-steps",title:"First Steps",description:"In this section, you will delve into the core concepts of ExpressoTS. To familiarize yourself with the framework and its building blocks, we'll guide you through the process of building a simple non-opinionated project from scratch. This will help you understand some of the initial framework concepts and get started with ExpressoTS.",source:"@site/docs/overview/first-steps.md",sourceDirName:"overview",slug:"/overview/first-steps",permalink:"/docs/overview/first-steps",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/overview/intro"},next:{title:"Application",permalink:"/docs/overview/application"}},l={},s=[{value:"The technology",id:"the-technology",level:2},{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Setup",id:"setup",level:2},{value:"Non-opinionated project template",id:"non-opinionated-project-template",level:3},{value:"Opinionated project template",id:"opinionated-project-template",level:3},{value:"Providers",id:"providers",level:4},{value:"Use cases",id:"use-cases",level:4},{value:"Main",id:"main",level:4},{value:"Opinionated in its simple form",id:"opinionated-in-its-simple-form",level:5},{value:"Opinionated using .env",id:"opinionated-using-env",level:5},{value:"Non opinionated",id:"non-opinionated",level:5},{value:"Application or AppInstance",id:"application-or-appinstance",level:2},{value:"The container",id:"the-container",level:2},{value:"Application uses the container",id:"application-uses-the-container",level:3},{value:"Injecting modules in the container",id:"injecting-modules-in-the-container",level:3},{value:"Injecting controllers in the modules",id:"injecting-controllers-in-the-modules",level:3},{value:"Fully hooked-up application flow",id:"fully-hooked-up-application-flow",level:3},{value:"Application creation",id:"application-creation",level:4},{value:"Module injection",id:"module-injection",level:4},{value:"Controller injection",id:"controller-injection",level:4},{value:"Running the application",id:"running-the-application",level:2},{value:"Running in development mode",id:"running-in-development-mode",level:3},{value:"Building the production bundle",id:"building-the-production-bundle",level:3},{value:"Running the production bundle",id:"running-the-production-bundle",level:3},{value:"Note",id:"note",level:2},{value:"Support the project",id:"support-the-project",level:2}],c={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"first-steps"},"First Steps"),(0,o.kt)("p",null,"In this section, you will delve into the core concepts of ExpressoTS. To familiarize yourself with the framework and its building blocks, we'll guide you through the process of building a simple non-opinionated project from scratch. This will help you understand some of the initial framework concepts and get started with ExpressoTS."),(0,o.kt)("h2",{id:"the-technology"},"The technology"),(0,o.kt)("p",null,"We believe in the power of strongly typed languages, and ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://www.typescriptlang.org/"},"TypeScript"))," is essential when it comes to structuring or building large-scale applications in ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://nodejs.org/"},"NodeJS")),". In the following example we will mostly use TypeScript, and here are the reasons why we use TypeScript:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Improved code quality: Strong typing helps to catch errors and bugs at compile time, rather than at runtime, which helps to improve the overall quality of the code. This can lead to fewer crashes and issues with the code in production.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Better scalability: Strong typing can help make code more scalable by allowing for easier refactoring and maintenance. This is because strong typing ensures that changes to the code are consistent and predictable, making it easier to add new features or modify existing ones.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Increased productivity: Strong typing can increase developer productivity by providing better tooling and editor support, such as code completion, type inference, and automatic refactoring. This can help developers write code faster and with fewer errors.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Improved collaboration: Strong typing can make it easier for developers to collaborate by providing a shared understanding of the types and interfaces used in the codebase. This can help reduce misunderstandings and inconsistencies and make it easier for developers to work together on the same codebase.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Better documentation: Strong typing can help make code more self-documenting by providing a clear and concise description of the types and interfaces used in the code. This can help reduce the need for extensive comments and documentation, making the code easier to understand and maintain."))),(0,o.kt)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,o.kt)("p",null,"Please make sure that ",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org"},"Node.js")," ",(0,o.kt)("inlineCode",{parentName:"p"},"version >=18.10.0")," is installed on your operating system."),(0,o.kt)("h2",{id:"setup"},"Setup"),(0,o.kt)("p",null,"Setting up a new ExpressoTS project is quite simple with ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/docs/cli/overview"},"ExpressoTS CLI")),". First install the CLI globally with ",(0,o.kt)("inlineCode",{parentName:"p"},"NPM"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm i -g @expressots/cli\n")),(0,o.kt)("p",null,"With ",(0,o.kt)("inlineCode",{parentName:"p"},"expressots")," CLI you can create a new project by running the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"expressots new <project-name>\n")),(0,o.kt)("p",null,"Or adding template name and package manager as arguments:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"expressots new <project-name> -t <template-name> -p <package-manager>\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"ExpressoTS offers two options for project templates:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"Non-opinionated: Want to have the liberty to build and structure your project as you wish? Non opinionated template offers a very small footprint, with only the necessary files to get you started."),(0,o.kt)("li",{parentName:"ul"},"Opinionated: Opinionated template is made for more complex projects, as it provides a more layered architecture."))),(0,o.kt)("p",null,"After creating your project, with the desired ",(0,o.kt)("inlineCode",{parentName:"p"},"<project-name>"),", and depending on the project template you have selected, your project will have a different folder and file structure. Here are the specific folder and file structures for each project template:"),(0,o.kt)("h3",{id:"non-opinionated-project-template"},"Non-opinionated project template"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tree"},"project-name/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 app.container.ts\n\u2502   \u251c\u2500\u2500 app.controller.ts\n\u2502   \u251c\u2500\u2500 app.module.ts\n\u2502   \u251c\u2500\u2500 app.usecase.ts\n\u2502   \u251c\u2500\u2500 main.ts\n\u251c\u2500\u2500 test/\n\u2502   \u251c\u2500\u2500 app.usecase.spec.ts\n")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"File Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"app.container.ts")),(0,o.kt)("td",{parentName:"tr",align:null},"The Inversify Server container is responsible for organizing all the modules of the application into a cohesive unit.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"app.controller.ts")),(0,o.kt)("td",{parentName:"tr",align:null},"A basic controller with a single route.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"app.module.ts")),(0,o.kt)("td",{parentName:"tr",align:null},"Application root module.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"app.usecase.ts")),(0,o.kt)("td",{parentName:"tr",align:null},"A basic use case with a single method, called ",(0,o.kt)("inlineCode",{parentName:"td"},"execute()"),".")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"main.ts")),(0,o.kt)("td",{parentName:"tr",align:null},"The main entry point of an ExpressoTS application.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"app.usecase.spec.ts")),(0,o.kt)("td",{parentName:"tr",align:null},"A basic unit test for the app.usecase.")))),(0,o.kt)("h3",{id:"opinionated-project-template"},"Opinionated project template"),(0,o.kt)("p",null,"In the opininated project template we provide a full CRUD example for a user entity, with all the necessary layers and files to get you started."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tree"},"project-name/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 entities/\n\u2502   \u2502   \u2514\u2500\u2500 base.entity.ts\n\u2502   \u2502   \u2514\u2500\u2500 user.entity.ts\n\u2502   \u251c\u2500\u2500 providers/\n\u2502   \u2502   \u2514\u2500\u2500 application/\n\u2502   \u2502       \u2514\u2500\u2500 application.provider.ts\n\u2502   \u2502   \u2514\u2500\u2500 db-in-memory/\n\u2502   \u2502       \u2514\u2500\u2500 db-in-memory.provider.ts\n\u2502   \u251c\u2500\u2500 repositories/\n\u2502   \u2502   \u2514\u2500\u2500 user/\n\u2502   \u2502       \u2514\u2500\u2500 user-repository.ts\n\u2502   \u2502   \u2514\u2500\u2500 base-repository.interface.ts\n\u2502   \u2502   \u2514\u2500\u2500 base-repository.ts\n\u2502   \u251c\u2500\u2500 useCases/\n\u2502   \u2502   \u2514\u2500\u2500 app/\n\u2502   \u2502       \u2514\u2500\u2500 app.controller.ts\n\u2502   \u2502       \u2514\u2500\u2500 app.module.ts\n\u2502   \u2502       \u2514\u2500\u2500 app.usecase.ts\n\u2502   \u2502   \u2514\u2500\u2500 user/\n\u2502   \u2502       \u2514\u2500\u2500 create/\n\u2502   \u2502           \u2514\u2500\u2500 user-create.controller.ts\n\u2502   \u2502           \u2514\u2500\u2500 user-create.dto.ts\n\u2502   \u2502           \u2514\u2500\u2500 user-create.usecase.ts\n|   \u2502       \u2514\u2500\u2500 delete/\n\u2502   \u2502           \u2514\u2500\u2500 user-delete.controller.ts\n\u2502   \u2502           \u2514\u2500\u2500 user-delete.dto.ts\n\u2502   \u2502           \u2514\u2500\u2500 user-delete.usecase.ts\n\u2502   \u2502       \u2514\u2500\u2500 find/\n\u2502   \u2502           \u2514\u2500\u2500 user-find.controller.ts\n\u2502   \u2502           \u2514\u2500\u2500 user-find.dto.ts\n\u2502   \u2502           \u2514\u2500\u2500 user-find.usecase.ts\n\u2502   \u2502       \u2514\u2500\u2500 findall/\n\u2502   \u2502           \u2514\u2500\u2500 user-findall.controller.ts\n\u2502   \u2502           \u2514\u2500\u2500 user-findall.dto.ts\n\u2502   \u2502           \u2514\u2500\u2500 user-findall.usecase.ts\n\u2502   \u2502       \u2514\u2500\u2500 findall/\n\u2502   \u2502           \u2514\u2500\u2500 user-findall.controller.ts\n\u2502   \u2502           \u2514\u2500\u2500 user-findall.dto.ts\n\u2502   \u2502           \u2514\u2500\u2500 user-findall.usecase.ts\n\u2502   \u2502       \u2514\u2500\u2500 user.module.ts\n\u2502   \u251c\u2500\u2500 app.container.ts\n\u2502   \u251c\u2500\u2500 env.ts\n\u2502   \u251c\u2500\u2500 main.ts\n\u251c\u2500\u2500 test/\n\u2502   \u251c\u2500\u2500 ping.usecase.spec.ts\n")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"File Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"entities/")),(0,o.kt)("td",{parentName:"tr",align:null},"This folder contains class definitions, or models with their attributes, properties and methods.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"providers/")),(0,o.kt)("td",{parentName:"tr",align:null},"This folder contains the layer responsible to provide externals resources to the application, also known as adapters.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"repositories/")),(0,o.kt)("td",{parentName:"tr",align:null},"Additional folder containing an example of repository pattern implementation, database layer communication.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"useCases/")),(0,o.kt)("td",{parentName:"tr",align:null},"The use case folder contains the use cases implementation of operations that can be performed in the application.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"app.container.ts")),(0,o.kt)("td",{parentName:"tr",align:null},"The Inversify Server container is responsible for organizing all the modules of the application into a cohesive unit.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"env.ts")),(0,o.kt)("td",{parentName:"tr",align:null},"This is an utility resource that maps .env variables.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"main.ts")),(0,o.kt)("td",{parentName:"tr",align:null},"The main entry point of an ExpressoTS application.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"ping.usecase.spec.ts")),(0,o.kt)("td",{parentName:"tr",align:null},"A basic unit test for the ping.usecase.")))),(0,o.kt)("p",null,"Below you can find some extra information about ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/docs/overview/providers"},"Providers")),", ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/docs/overview/usecase"},"Use Cases"))," and the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/docs/overview/application"},"Main"))," entry point of an ExpressoTS application used in the Opinionated template."),(0,o.kt)("h4",{id:"providers"},"Providers"),(0,o.kt)("p",null,"Contain 3 providers:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"application: This provider is a class that extend from the Application class from @expressots/core that provides the application ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/docs/overview/application#lifecycle-hooks"},"Life Cycle Hooks")),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"bindingType/singleton: This provider lets you bind a class as a singleton. We use this provider to bind the InMemoryDB class as a singleton so that we can use the same instance of the InMemoryDB class throughout the application.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"db-in-memory: This is a simple in-memory database provider that allows you to store data in memory. We use this provider in the User use cases to store and retrieve user data."))),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"bindingType and InMemoryDB provider is an example supplied to help you get started with a simple CRUD operation. You can remove this provider if you wish.")),(0,o.kt)("h4",{id:"use-cases"},"Use cases"),(0,o.kt)("p",null,"The use cases in the Opinionated template are organized in 3 modules:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"AppModule, PingModule and UserModule, providing some examples of usage of the ExpressoTS resources. For more information about modules, please check the ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"/docs/overview/module"},"Modules Section")),".")),(0,o.kt)("p",null,"Here are the endpoints in each module:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"[AppModule]","/app.controller: returns ",(0,o.kt)("inlineCode",{parentName:"li"},"Hello from ExpressoTS App")),(0,o.kt)("li",{parentName:"ul"},"[UserModule]","/user-create.controller: creates a new user in the in-memory database"),(0,o.kt)("li",{parentName:"ul"},"[UserModule]","/user-delete.controller: delete a user by ",(0,o.kt)("inlineCode",{parentName:"li"},"id")," in the in-memory database"),(0,o.kt)("li",{parentName:"ul"},"[UserModule]","/user-find.controller: return one user from the in-memory database"),(0,o.kt)("li",{parentName:"ul"},"[UserModule]","/user-findall.controller: returns all users from the in-memory database"),(0,o.kt)("li",{parentName:"ul"},"[UserModule]","/user-update.controller: update a user info from the in-memory database")),(0,o.kt)("h4",{id:"main"},"Main"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"main.ts")," includes an async function that will bootstrap the ExpressoTS application."),(0,o.kt)("h5",{id:"opinionated-in-its-simple-form"},"Opinionated in its simple form"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// Using opinionated start project where App extends @expressots/core Application class\nasync function bootstrap() {\n  const app = App.create(container);\n  app.listen(3000, ServerEnvironment.Production);\n}\n")),(0,o.kt)("h5",{id:"opinionated-using-env"},"Opinionated using .env"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// Using the opinionated starter project where App extends Application class from @expressots/core\nasync function bootstrap() {\n  const app = App.create(container);\n  app.listen(3000, ServerEnvironment.Production, {\n    appName: ENV.Application.APP_NAME,\n    appVersion: ENV.Application.APP_VERSION,\n  });\n}\n\n// Or from .env\nasync function bootstrap() {\n  const app = App.create(container);\n  app.listen(\n    ENV.Application.PORT,\n    ServerEnvironment[ENV.Application.ENVIRONMENT],\n    {\n      appName: ENV.Application.APP_NAME,\n      appVersion: ENV.Application.APP_VERSION,\n    }\n  );\n}\n\nbootstrap();\n")),(0,o.kt)("h5",{id:"non-opinionated"},"Non opinionated"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// Using the non-opinionated starter project where AppInstance is an instance of the Application class from @expressots/core\nasync function bootstrap() {\n  const app = AppInstance.create(container);\n  app.listen(3000, ServerEnvironment.Development);\n}\n\nbootstrap();\n")),(0,o.kt)("h2",{id:"application-or-appinstance"},"Application or AppInstance"),(0,o.kt)("p",null,"To bootstrap an ExpressoTS application, there are two ways:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Using the AppInstance: which is an instance of the Application class that provides the ",(0,o.kt)("inlineCode",{parentName:"li"},"create()")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"listen()")," methods."),(0,o.kt)("li",{parentName:"ul"},"Extending the Application class. By extending the Application class, you can take advantage of its built-in mechanisms for controlling the ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"/docs/overview/application#application-lifecycle-hooks"},"application life cycle hooks")),", such as injecting and executing services before, after, and during application shutdown.")),(0,o.kt)("p",null,"Application Instance"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { AppInstance, ServerEnvironment } from "@expressots/core";\nimport { container } from "./app-container";\n\nexport async function bootstrap() {\n  const app = AppInstance.create(container);\n  app.listen(3000, ServerEnvironment.Development);\n}\n\nbootstrap();\n')),(0,o.kt)("p",null,"Extending the Application class. Inside of the provider folder, create a folder called ",(0,o.kt)("inlineCode",{parentName:"p"},"application")," and create a new file called ",(0,o.kt)("inlineCode",{parentName:"p"},"application.provider.ts")," and add the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Application, Environments, LogLevel, log } from "@expressots/core";\nimport { provide } from "inversify-binding-decorators";\n\n@provide(App)\nclass App extends Application {\n  protected configureServices(): void {\n    Environments.checkAll();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  protected postServerInitialization(): void {}\n\n  protected serverShutdown(): void {\n    log(LogLevel.Info, "Server is shutting down", "logger-provider");\n    super.serverShutdown();\n  }\n}\n\nconst appInstance = new App();\n\nexport { appInstance as App };\n')),(0,o.kt)("p",null,"Application Bootstrap ignited by the extended Application class"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { App } from "@providers/application/application.provider";\nimport { container } from "app-container";\nimport { ServerEnvironment } from "@expressots/core";\n\nasync function bootstrap() {\n  const app = App.create(container);\n  app.listen(3000, ServerEnvironment.Development);\n}\n\nbootstrap();\n')),(0,o.kt)("h2",{id:"the-container"},"The container"),(0,o.kt)("p",null,"In ExpressoTS, creating an application server to listen to inbound HTTP requests is not enough. The framework requires the creation of a container that organizes all application modules into a cohesive unit. Typically, this container is created in the app-container.ts file. The container is responsible for managing the application's dependencies. Read more about the ",(0,o.kt)("inlineCode",{parentName:"p"},"app-container")," in the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/docs/overview/app-container"},"App Container"))," section."),(0,o.kt)("h3",{id:"application-uses-the-container"},"Application uses the container"),(0,o.kt)("p",null,"After the container is created in the ",(0,o.kt)("inlineCode",{parentName:"p"},"app-container")," file, the application can be created by passing the container as a parameter to the ",(0,o.kt)("inlineCode",{parentName:"p"},"AppInstance.create(container)")," method or by extending the Application class."),(0,o.kt)("h3",{id:"injecting-modules-in-the-container"},"Injecting modules in the container"),(0,o.kt)("p",null,"Once the container is created, modules can be injected into the application. These modules are the building blocks of an ExpressoTS application and are responsible for organizing the application's business logic into layers, as a module is a group of functionalities or endpoints also called ",(0,o.kt)("inlineCode",{parentName:"p"},"controllers"),".\nRead more about the modules in the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/docs/overview/module"},"Modules"))," section."),(0,o.kt)("h3",{id:"injecting-controllers-in-the-modules"},"Injecting controllers in the modules"),(0,o.kt)("p",null,"The controller layer handles incoming requests and returns appropriate responses, they are the entry point of the application for each endpoint. Read more about the controllers in the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/docs/overview/controller"},"Controllers"))," section. In order to make a controller functional, it must be injected into a module. This can be done by passing the controller as a parameter to the ",(0,o.kt)("inlineCode",{parentName:"p"},"CreateModule")," method."),(0,o.kt)("h3",{id:"fully-hooked-up-application-flow"},"Fully hooked-up application flow"),(0,o.kt)("p",null,"After creating a module, the module can be added in the container, and after creating controllers, controllers can be injected into the module, resulting in a fully hooked-up application flow. The following code snippet demonstrates this process:"),(0,o.kt)("h4",{id:"application-creation"},"Application creation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const app = AppInstance.create(container);\n")),(0,o.kt)("h4",{id:"module-injection"},"Module injection"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const appContainer = new AppContainer();\n\nconst container = appContainer.create([\n  // Add your modules here\n  AppModule,\n]);\n")),(0,o.kt)("h4",{id:"controller-injection"},"Controller injection"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const appModule = CreateModule([\n  // Add your controllers here\n  AppController,\n]);\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"It is worth noting that a project created with the ExpressoTS CLI comes with an initial project structure that promotes adherence to a specific convention set by the framework. This ensures that each module has its own dedicated directory, helping developers maintain consistency throughout their codebase.")),(0,o.kt)("h2",{id:"running-the-application"},"Running the application"),(0,o.kt)("p",null,"Once the installation process is complete, you can start listening to HTTP requests based on the defined controller endpoint that will invoke the corresponding use case to generate the response. To do this, simply run the following command in your OS terminal:"),(0,o.kt)("h3",{id:"running-in-development-mode"},"Running in development mode"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm run dev\n")),(0,o.kt)("h3",{id:"building-the-production-bundle"},"Building the production bundle"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm run build\n")),(0,o.kt)("h3",{id:"running-the-production-bundle"},"Running the production bundle"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm run prod\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Once the application is up and running, you can access it by navigating to ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:3000/"),".")),(0,o.kt)("h2",{id:"note"},"Note"),(0,o.kt)("p",null,"ExpressoTS is a versatile framework that is not bound to any specific platform or technology. Leveraging popular Node.js libraries like InversifyJS and ExpressJS, it is designed to be lightweight, modular, customizable, and easy to use. Developers can expand the framework's capabilities by creating new providers that can be incorporated into their applications."),(0,o.kt)("p",null,"We are currently working on building the project RoadMap and plan to add support for other popular Node.js HTTP frameworks, like Fastify and Koa, to the platform. Additionally, as we move towards the future, we intend to eliminate some of the dependencies that are currently part of the framework's core, and replacing them with our own custom implementations to make the framework more secure, reliable and efficient."),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"support-the-project"},"Support the project"),(0,o.kt)("p",null,"ExpressoTS is an MIT-licensed open source project. It's an independent project with ongoing development made possible thanks to your support. If you'd like to help, please consider:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Become a sponsor on ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/sponsors/expressots"},"Sponsor no GitHub"))),(0,o.kt)("li",{parentName:"ul"},"Follow the ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/expressots"},"organization"))," on GitHub and Star \u2b50 the project"),(0,o.kt)("li",{parentName:"ul"},"Subscribe to the Twitch channel: ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://www.twitch.tv/richardzampieri"},"Richard Zampieri"))),(0,o.kt)("li",{parentName:"ul"},"Join our ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://discord.com/invite/PyPJfGK"},"Discord"))),(0,o.kt)("li",{parentName:"ul"},"Contribute submitting ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/expressots/expressots/issues/new/choose"},"issues and pull requests"))),(0,o.kt)("li",{parentName:"ul"},"Share the project with your friends and colleagues")))}u.isMDXComponent=!0}}]);