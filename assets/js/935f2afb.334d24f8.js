"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Hello, Dev","href":"/docs/hello","docId":"hello"},{"type":"category","label":"Overview","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/overview/intro","docId":"overview/intro"},{"type":"link","label":"First Steps","href":"/docs/overview/first-steps","docId":"overview/first-steps"},{"type":"link","label":"Application","href":"/docs/overview/application","docId":"overview/application"},{"type":"link","label":"App Container","href":"/docs/overview/app-container","docId":"overview/app-container"},{"type":"link","label":"Modules","href":"/docs/overview/module","docId":"overview/module"},{"type":"link","label":"Controllers","href":"/docs/overview/controller","docId":"overview/controller"},{"type":"link","label":"Use Cases","href":"/docs/overview/usecase","docId":"overview/usecase"},{"type":"link","label":"Providers","href":"/docs/overview/providers","docId":"overview/providers"},{"type":"link","label":"Repositories","href":"/docs/overview/repositories","docId":"overview/repositories"},{"type":"link","label":"Entities","href":"/docs/overview/entities","docId":"overview/entities"},{"type":"link","label":"Decorators","href":"/docs/overview/decorators","docId":"overview/decorators"},{"type":"link","label":"Dependency Injection","href":"/docs/overview/di","docId":"overview/di"},{"type":"link","label":"Dependencies","href":"/docs/overview/dependencies","docId":"overview/dependencies"},{"type":"link","label":"Status Code","href":"/docs/overview/status-code","docId":"overview/status-code"},{"type":"link","label":"Error Handling","href":"/docs/overview/error-handling","docId":"overview/error-handling"},{"type":"link","label":"Test","href":"/docs/overview/test","docId":"overview/test"},{"type":"link","label":"Render","href":"/docs/overview/render","docId":"overview/render"}],"href":"/docs/category/overview"},{"type":"category","label":"Providers","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Environment validator","href":"/docs/providers/envvalidator","docId":"providers/envvalidator"},{"type":"link","label":"Prisma provider","href":"/docs/providers/prisma","docId":"providers/prisma"}],"href":"/docs/category/providers"},{"type":"category","label":"CLI","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/cli/overview","docId":"cli/overview"},{"type":"link","label":"Generate","href":"/docs/cli/generate","docId":"cli/generate"}],"href":"/docs/category/cli"},{"type":"category","label":"Tutorials","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Compression","href":"/docs/tutorials/compression","docId":"tutorials/compression"},{"type":"link","label":"Cookies","href":"/docs/tutorials/cookies","docId":"tutorials/cookies"}],"href":"/docs/category/tutorials"},{"type":"link","label":"Roadmap","href":"/docs/roadmap","docId":"roadmap"},{"type":"link","label":"Governance","href":"/docs/governance","docId":"governance"}]},"docs":{"cli/generate":{"id":"cli/generate","title":"Generate","description":"In order to provide a better developer experience, the ExpressoTS CLI provides a set of commands to help you to scaffold the application resources such as use cases, controllers, dto\'s, providers and services.","sidebar":"tutorialSidebar"},"cli/overview":{"id":"cli/overview","title":"Overview","description":"The ExpressoTS CLI is a command-line interface tool that helps you to create ExpressoTS projects and scaffold the application resources such as use cases, controllers, dto\'s, providers and services.","sidebar":"tutorialSidebar"},"governance":{"id":"governance","title":"Governance","description":"ExpressoTS is built by its community. We welcome and appreciate contributions of all kinds. There are many ways to help, from reporting issues, contributing code, and helping us improve our community.","sidebar":"tutorialSidebar"},"hello":{"id":"hello","title":"Hello, Dev","description":"Thank you for embarking on this journey with us to create an ambitious and exciting developer experience that is continuously improving. \ud83c\udf89\ud83c\udf89\ud83c\udf89","sidebar":"tutorialSidebar"},"overview/app-container":{"id":"overview/app-container","title":"App Container","description":"The ExpressoTS uses InversifyJS as its ioC (Inversion of Control) container. It is a powerful tool for managing dependency injection. It is a type-aware container that can be used to manage the instantiation and resolution of objects, as well as the management of their life cycles.","sidebar":"tutorialSidebar"},"overview/application":{"id":"overview/application","title":"Application","description":"The Application Overview provides a comprehensive demonstration of the main components of an ExpressoTS application. At the heart of an ExpressoTS application lies the Application class, which serves as the foundation for creating and configuring the server. Additionally, the Application class makes use of the application container from Inversify that loads all the modules, including their respective routes [controllers]. This ensures a streamlined and efficient process for handling incoming requests and delivering the appropriate responses.","sidebar":"tutorialSidebar"},"overview/controller":{"id":"overview/controller","title":"Controllers","description":"Controllers act as the primary interface between the client and server in ExpressoTS applications. They handle incoming requests, validate payloads against Input DTO, and emit responses in the DTO pattern. In essence, controllers bridge the communication between clients and service layers, also known as use-cases.","sidebar":"tutorialSidebar"},"overview/decorators":{"id":"overview/decorators","title":"Decorators","description":"Here is a complete list of all the decorators that are available in ExpressoTS as wel as a brief description of what they do.","sidebar":"tutorialSidebar"},"overview/dependencies":{"id":"overview/dependencies","title":"Dependencies","description":"The purpose of this section is to list all dependencies used by ExpressoTS and our vision about dependency management.","sidebar":"tutorialSidebar"},"overview/di":{"id":"overview/di","title":"Dependency Injection","description":"Dependency Injection (DI) is a design pattern used in software development that involves providing an object with the instances of the classes it needs to perform its tasks, rather than having it construct these instances itself. This process of providing instances is called injecting them, hence the term Dependency Injection.","sidebar":"tutorialSidebar"},"overview/entities":{"id":"overview/entities","title":"Entities","description":"Entities are the core components of an ExpressoTS application. They are the objects that are used to represent the data that is going to be manipulated by the application.","sidebar":"tutorialSidebar"},"overview/error-handling":{"id":"overview/error-handling","title":"Error Handling","description":"When it comes to error handling in Node.js TypeScript APIs, there are several best practices and approaches you can follow. ExpressoTS providers a simple and easy way to handle errors.","sidebar":"tutorialSidebar"},"overview/first-steps":{"id":"overview/first-steps","title":"First Steps","description":"In this section, you will delve into the core concepts of ExpressoTS. To familiarize yourself with the framework and its building blocks, we\'ll guide you through the process of building a simple non-opinionated project from scratch. This will help you understand some of the initial framework concepts and get started with ExpressoTS.","sidebar":"tutorialSidebar"},"overview/intro":{"id":"overview/intro","title":"Introduction","description":"ExpressoTS is a TypeScript lightweight framework for building scalable, readable and maintainable server-side applications.","sidebar":"tutorialSidebar"},"overview/module":{"id":"overview/module","title":"Modules","description":"A module or container module is a collection of services, in our case more specifically Controllers and their dependencies that can be registered and resolved by ExpressoTS custom InversifyJS container wrapper.","sidebar":"tutorialSidebar"},"overview/providers":{"id":"overview/providers","title":"Providers","description":"From the perspective of the ExpressoTS Architecture, Providers are responsible for supplying data and/or mechanics to the application, abstracting the details of how the data/mechanic is actually implemented. This abstraction aligned with the Dependency Injection Container enables the developer to easily switch between different data sources/providers without affecting the other parts of the application as they are decoupled.","sidebar":"tutorialSidebar"},"overview/render":{"id":"overview/render","title":"Render","description":"Expressjs offers a render method to render a view and send the rendered HTML string to the client.","sidebar":"tutorialSidebar"},"overview/repositories":{"id":"overview/repositories","title":"Repositories","description":"In ExpressoTS, a repository class typically includes methods such as create, update, find, findOne, and delete, which correspond to common CRUD (Create, Read, Update, Delete) operations on the data store. These methods can be implemented using a database library or ORM (Object-Relational Mapping) tool such as TypeORM, Prisma, Sequelize, etc.","sidebar":"tutorialSidebar"},"overview/status-code":{"id":"overview/status-code","title":"Status Code","description":"Status code is a way to represent the result of a request. These HTTP responses indicate whether a specific HTTP request has been successfully completed. Responses are grouped in five classes:","sidebar":"tutorialSidebar"},"overview/test":{"id":"overview/test","title":"Test","description":"Unit testing and integration testing are both important in any application development process because they serve different purposes.","sidebar":"tutorialSidebar"},"overview/usecase":{"id":"overview/usecase","title":"Use Cases","description":"From a UML standpoint, use cases provide a way to model the interactions between users, other systems, and a software application. A use case describes a specific scenario or flow of events between the actors and the system, leading to a certain outcome.","sidebar":"tutorialSidebar"},"providers/envvalidator":{"id":"providers/envvalidator","title":"Environment validator","description":"The environment validator provider is a provider that ExpressoTS offers out-of-the-box. It is used to validate the existence of the .env file and its content.","sidebar":"tutorialSidebar"},"providers/prisma":{"id":"providers/prisma","title":"Prisma provider","description":"Coming soon...","sidebar":"tutorialSidebar"},"roadmap":{"id":"roadmap","title":"Roadmap","description":"Coming soon...","sidebar":"tutorialSidebar"},"tutorials/compression":{"id":"tutorials/compression","title":"Compression","description":"The npm compression package is a middleware that can compress response bodies for requests that traverse through it, which can help reduce the size of data that\'s sent over the network, leading to quicker response times and lower bandwidth usage. It uses the zlib library to perform gzip or deflate compression, both of which are widely supported by modern web browsers.","sidebar":"tutorialSidebar"},"tutorials/cookies":{"id":"tutorials/cookies","title":"Cookies","description":"Cookies are small pieces of data that a website sends to a user\'s web browser while the user is browsing that website. Every time the user loads the website, the browser sends the cookie back to the server to notify the website of the user\'s previous activity.","sidebar":"tutorialSidebar"}}}')}}]);